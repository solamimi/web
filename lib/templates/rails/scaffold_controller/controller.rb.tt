# coding: utf-8
<% if namespaced? -%>
require_dependency "<%= namespaced_path %>/application_controller"

<% end -%>
<% module_namespacing do -%>
class <%= controller_class_name %>Controller < ApplicationController
<%- attributes.select(&:reference?).each do |attribute| -%>
  before_action :set_<%= attribute.name %>_options, only: [:index, :show, :edit, :new, :update, :create]
<%- end -%>
  before_action :set_<%= singular_table_name %>, only: [:show, :edit, :update, :destroy]

  # GET <%= route_url %>
  def index
    @search_<%= singular_table_name %> = <%= class_name %>::Search.new(search_params)
    @<%= plural_table_name %> = @search_<%= singular_table_name %>.search(params[:page])
  end

  # GET <%= route_url %>/1
  def show
  end

  # GET <%= route_url %>/new
  def new
    @<%= singular_table_name %> = <%= orm_class.build(class_name) %>
  end

  # GET <%= route_url %>/1/edit
  def edit
  end

  # POST <%= route_url %>
  def create
    @<%= singular_table_name %> = <%= orm_class.build(class_name, "#{singular_table_name}_params") %>

    if @<%= orm_instance.save %>
      redirect_to <%= redirect_resource_name %>, notice: <%= "'#{human_name} was successfully created.'" %>
    else
      render :new
    end
  end

  # PATCH/PUT <%= route_url %>/1
  def update
    if @<%= orm_instance.update("#{singular_table_name}_params") %>
      redirect_to <%= redirect_resource_name %>, notice: <%= "'#{human_name} was successfully updated.'" %>
    else
      render :edit
    end
  end

  # DELETE <%= route_url %>/1
  def destroy
    @<%= singular_table_name %>.logical_delete!
    redirect_to <%= index_helper %>_url, notice: <%= "'#{human_name} was successfully destroyed.'" %>
  end

  private
    # Search params
    def search_params
      if params[:<%= singular_table_name %>_search]
        <%- if attributes_names.empty? -%>
        params.fetch(:<%= singular_table_name %>_search, {})
        <%- else -%>
<%-
attrs_with_type = attributes.group_by(&:type)
search_attrs = {
  text: [
      attrs_with_type[:string],
      attrs_with_type[:text]
    ].flatten.compact.map(&:name),
  date:
    (attrs_with_type[:date] || []).map { |attr|
      ["#{attr.name}_from", "#{attr.name}_to"]
    }.flatten,
  datetime: [
      attrs_with_type[:datetime],
      attrs_with_type[:timestamp],
      attrs_with_type[:time]
    ].flatten.compact.map{ |attr|
      ["#{attr.name}_from", "#{attr.name}_to"]
    }.flatten,
  integer: [
      attrs_with_type[:integer],
      attrs_with_type[:float],
      attrs_with_type[:decimal]
    ].flatten.compact.map{ |attr|
      ["#{attr.name}_from", "#{attr.name}_to"]
    }.flatten,
  boolean:
    (attrs_with_type[:boolean] || []).flatten.map(&:name),
  references:
    (attrs_with_type[:references] || []).flatten.map do |attr|
      "#{attr.name} => []"
    end
}
-%>
        params.require(:<%= singular_table_name %>_search).permit(:<%= search_attrs.values.flatten.compact.join(', :') %>)
      <%- end -%>
      else
        {}
      end
    end

<%- attributes.select(&:reference?).each do |attribute| -%>
    # Set <%= attribute.name %> select tag options.
    def set_<%= attribute.name %>_options
      @<%= attribute.name %>_options = <%= attribute.name.classify %>.active.map{ |<%= attribute.name %>| [<%= attribute.name %>.to_s, <%= attribute.name %>.id] }
    end

<%- end -%>
    # Use callbacks to share common setup or constraints between actions.
    def set_<%= singular_table_name %>
      @<%= singular_table_name %> = <%= class_name %>.active.find(params[:id])
    end

    # Only allow a trusted parameter "white list" through.
    def <%= "#{singular_table_name}_params" %>
      <%- if attributes_names.empty? -%>
      params.fetch(:<%= singular_table_name %>, {})
      <%- else -%>
      params.require(:<%= singular_table_name %>).permit(<%= attributes_names.map { |name| ":#{name}" }.join(', ') %>, :lock_version)
      <%- end -%>
    end
end
<% end -%>
